'''
Created on 13.06.2012

@author: ActionLuzifer
'''

import os
import sys

class SyliaToJobs():
    '''
    classdocs
    '''

    _JOBS_HEADER = "// VirtualDub job list (Sylia script format)\n\
// This file was generated by Sylia2Jobs -- edit at your own risk.\n\
//\n\
// $numjobs $ANZAHLJOBS\n\
//\n\
"
    _JOBS_FOOTER = "// $done\n"
    
    _JOB_HEADER = "// $job \"Job $JOBNR\" \n\
// $input \"$FILEIN\" \n\
// $output \"$FILEOUT\" \n\
// $state 0 \n\
// $start_time 0 0 \n\
// $end_time 0 0 \n\
// $script \n\
"
    _JOB_FOOTER = "// $endjob\n\
//\n\n\n\
"

    ANZAHLJOBS = "$ANZAHLJOBS"
    JOBNR = "$JOBNR"
    FILEIN = "$FILEIN"
    FILEOUT = "$FILEOUT"

    OPENSTR = "VirtualDub.Open("
    CLOSESTR = "VirtualDub.SaveAVI("

    def __init__(self, params):
        '''
        Constructor
        '''
        self.file = "syliatojobs.jobs"
        self.folder = "."
        if len(sys.argv)>1:
            print(">1")
            self.setInfos(1)
        if len(sys.argv)>2:
            print(">2")
            self.setInfos(2)
        print(self.file)
        print(self.folder)


    def getListOfSyliaFiles(self):
        if os.path.exists(self.folder):
            files = os.listdir(self.folder)
            files=[filename for filename in files if filename.endswith("syl")]
            files.sort()
        else:
            files=[]
            print("ERROR: Pfad existiert nicht")
        return files

    
    def setInfos(self, argX):
        print(sys.argv[argX])
        if sys.argv[argX].startswith("file="):
            self.file   = sys.argv[argX].replace("file=", "")
        if sys.argv[argX].startswith("dir="):
            self.folder = sys.argv[argX].replace("dir=", "")
            if not self.folder.endswith("/"):
                self.folder = self.folder+"/"
            
            
    def getFilename(self, zeile, jobHead, stringtoreplace):
        anfang = zeile.find("\"")
        ende = zeile.find("\"", anfang+1)
        jobHead = jobHead.replace(stringtoreplace, zeile[anfang+1:ende].replace("\\\\", "\\" ))
        return jobHead

    
    def concatenateSyls(self, sylfiles):
        jobs = ""
        jobnr = 0
        
        for sylfile in sylfiles:
            job = ""
            jobnr = jobnr+1
            jobheader = self._JOB_HEADER.replace(self.JOBNR, repr(jobnr))
            jobfooter = self._JOB_FOOTER
            file = open(self.folder+sylfile, 'r')
            fileStr = file.read()
            file.close()
            zeilen = fileStr.splitlines()
            for zeile in zeilen:
                if zeile.find(self.OPENSTR)  > -1:
                    jobheader = self.getFilename(zeile, jobheader, self.FILEIN)
                if zeile.find(self.CLOSESTR) > -1:
                    jobheader = self.getFilename(zeile, jobheader, self.FILEOUT)
                job = job+"\n"+zeile
            # Header und Footer drumherum legen
            jobs = jobs + jobheader + job + "\n" + jobfooter
        return jobs, jobnr
        

    def run(self):
        # check ob zu schreibende Datei noch nicht existiert, wenn doch -> abbruch
        if os.path.exists(self.folder+self.file):
            print("ERROR: Datei existiert bereits")
        else:
            # Sylia-Dateien suchen
            sylfiles = self.getListOfSyliaFiles()
            if len(sylfiles):
                # Inhalte der Sylia-Dateien in einen Text (Jobs) einf√ºgen
                jobs, anzahljobs = self.concatenateSyls(sylfiles)
                
                # Header und Footer an Jobs anlegen
                jobs = self._JOBS_HEADER.replace(self.ANZAHLJOBS, repr(anzahljobs)) + jobs + self._JOBS_FOOTER
                
                # Jobs-Datei speichern
                file = open(self.folder+self.file, 'w')
                file.write(jobs)
